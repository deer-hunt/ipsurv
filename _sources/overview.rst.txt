Overview
==================================

Installation
-------------------------------------------------------------

.. code-block:: shell

   $ pip install ipsurv
   or
   $ pip3 install ipsurv

Features
-------------------------------------------------------------

- Grouping by IP or Subnet.
- Skip duplicate by the group.
- Autodetect IP in line. Trying to resolve the name automatically.
- Autodetect delimiter-char.
- Customize output format. There are many format.
- Output JSON format.
- Show headers.
- Check ICMP, TCP, UDP, HTTP.
- Set timeout.
- Load env variable. And changing arguments and internal configures.
- Use GeoIP2 via IpSurv optionally.

Usage
==================================

**Specify IP using Argument**

.. code-block:: shell

   $ cat ips.txt|ipsurv 192.168.1.10
   $ cat ips.txt|ipsurv 192.168.1.10 192.168.1.11


**Specify IP using PIPE**

.. code-block:: shell

   $ cat ips.txt|ipsurv
   $ cat apache.log|ipsurv

**Self mode**

.. code-block:: shell

   $ ipsurv self


Example options
-------------------------------------------------------------

.. code-block:: shell

	$ cat ips.txt|ipsurv --group=24
	$ cat ips.txt|ipsurv --group=network
	$ cat ips.txt|ipsurv --format=country
	$ cat ips.txt|ipsurv --format=hostname
	$ cat ips.txt|ipsurv --format="{country},{name},{geo}"
	$ cat ips.txt|ipsurv --format="{country},{ip_int},{handle},{port43}"
	$ cat /var/log/httpd/access_log|ipsurv --ident --no_original

	$ cat ips.txt|ipsurv --group=255.255.255.0
	$ cat ips.txt|ipsurv --delimiter="\t"
	$ cat ips.txt|ipsurv --format="{group}\t{ip_int}\t{country}\t{handle}\t{port43}"
	$ cat ips.txt|ipsurv --format="{country},{ip_int},{handle},{port43},{icmp},{port},{tcp}" --group=network --icmp=1 --tcp=1 --timeout=2



Command examples
-------------------------------------------------------------

.. code-block:: shell

   $ cat .dev/test/government.txt|ipsurv --headers=1 --format="{status},{group},{country},{name},{cidr},{http},{http_h2}" --group=network --http=2

   original,status,group,country,name,cidr,http,http_h2
   www.whitehouse.gov,OK,192.0.64.1,US,AUTOMATTIC,192.0.64.0/18,HTTP_OK,HTTP2
   www.state.gov,OK,3.165.0.1,US,AMAZON-CF,3.165.0.0/16,HTTP_OK,HTTP2
   www.treasury.gov,OK,23.32.0.1,US,AKAMAI,23.32.0.0/11,HTTP_OK,HTTP2
   www.gov.uk,OK,151.101.0.1,US,SKYCA-3,151.101.0.0/16,HTTP_OK,HTTP2
   www.gouvernement.fr,OK,217.70.184.1,FR,GANDIFR-NET4,217.70.184.0/24,HTTP_OK,HTTP1
   www.diplomatie.gouv.fr,OK,77.128.0.1,FR,FR-SFR-20100831,77.128.0.0/11,HTTP_OK,HTTP1
   www.economie.gouv.fr,OK,141.101.88.1,EU,CLOUDFLARE-EU,141.101.88.0/21,HTTP_OK,HTTP2
   www.bundesregierung.de,OK,185.173.230.1,DE,BABIEL-NET-230,185.173.230.0/24,HTTP_OK,HTTP2

.. code-block:: shell
	$ ipsurv wikipedia.org --json_all     # `--json_all` is equivalent to `--json=2 --exhaustive`
	$ ipsurv wikipedia.org --format=default --json=2 --exhaustive
	{
	  "success": true,
	  "status": "OK",
	  "requests": [
	  	"RDAP"
	  ],
	  "errors": [],
	  "sequence": 1,
	  "original": "wikipedia.org",
	  "target": "103.102.166.224",
	  "ip": "103.102.166.224",
	  "ip_int": 1734780640,
	  "port": null,
	  "group_int": 0,
	  "group": "",
	  "group_found": false,
	  "group_status": "-",
	  "country": "US",
	  "name": "WIKIMEDIA-AP",
	  "network_start": "103.102.166.0",
	  "network_end": "103.102.166.255",
	  "ip_hex": "67.66.A6.E0",
	  "ip_reversed": "224.166.102.103",
	  "ip_type": "PUBLIC",
	  ~~~~~~~~~~~~~
	  "org": "Wikimedia Foundation, Inc.",
	  "address": "1 Montgomery Street Suite 1600",
	  "description": "Wikimedia Foundation, Inc.",
	  "target.raw": "wikipedia.org",
	  "target.identifier": "103.102.166.224",
	  "target.identifier_int": 1734780640,
	  "target.identified": true,
	  "target.ip": "103.102.166.224",
	  "target.url": null,
	  "target.fqdn": "wikipedia.org",
	  "target.port": null,
	  "target.status": "EXIST"
	}

.. code-block:: shell

   $ ipsurv https://www.reddit.com --format="{ip},{http},{http_status},{http_size},{http_mime},{http_server},{http_h2}" --http=2
   https://www.reddit.com,151.101.193.140,HTTP_OK,200,721210,text/html,snooserv,HTTP2
   $ ipsurv https://www.youtube.com/feed/you --format=web --http=2
   https://www.youtube.com/feed/you,142.251.42.174,HTTP_OK,200,559230,text/html,ESF,HTTP2


For details, `Command examples <pages/command_examples.html>`_ / `Command arguments <pages/command_arguments.html>`_.

Using GeoIP2 optionally
==================================

`IpSurv` support `GeoIP2 <https://github.com/maxmind/GeoIP2-python>`_ optionally. If `GeoIP2` module is installed and there are `mmdb` files, You can use GeoIP2 features via `IpSurv`.
When using the GeoIP2 module, network communication does not occur, which enables faster processing.

Please refer to the `Using GeoIP2 <https://deer-hunt.github.io/ipsurv/pages/using_geoip2.html>`_ documentation in detail.

**Examples**

.. code-block:: shell

	$ ipsurv 8.8.8.8 --geoip_only
	8.8.8.8,NA,North America,US,United States,America/Chicago,AS15169,37.751;-97.822

	$ ipsurv www.wikipedia.org --format="{country},{geo}" --collect=geoip --headers=1
	original,country,geo
	www.wikipedia.org,US,37.751;-97.822

	$ ipsurv 8.8.8.8 --format="{continent},{continent_name},{country},{geo}" --collect="geoip" --headers=1
	original,continent,continent_name,country,geo
	8.8.8.8,NA,North America,US,37.751;-97.822


> `IpSuv` support customizing GeoIP2 data path by `IPSURV_CONF` env. Please read `here <https://deer-hunt.github.io/ipsurv/pages/command_arguments.html#environment-variable-ipsurv-conf>`_ about `IPSURV_CONF`.


Debugging
==================================

In verbose mode, outputting internal data and behaviors in detail.

.. code-block:: shell

	$ ipsurv ***** --verbose=2     #INFO
	$ ipsurv ***** --verbose=3     #DEBUG

	$ ipsurv ***** --debug      #DEBUG  This option is equivalent to "--verbose=3"


For details, `Development and Debugging <pages/development_debug.html>`_


Customizing IpSurv
==================================

```IpSurv``` is implemented as customizable program architecture. ```IpSurv``` provide extending features and several classes. Please read ```program_architecture_classes.md```.

For details, `Program architecture and Classes <pages/program_architecture_classes.html>`_ / `Development and Debugging <pages/development_debug.html>`_ / `Customizing and Examples <pages/customize_examples.html>`_
